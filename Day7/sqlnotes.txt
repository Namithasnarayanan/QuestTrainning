SQL TCL Commands
TCL (Transaction Control Language) commands in SQL are used to manage transactions in a database.                                                                                           

1.COMMIT: Saves all the changes made in the current transaction.
syntax: COMMIT;


2.ROLLBACK: Undoes changes made in the current transaction if an error occurs.
Syntax: ROLLBACK;


3.SAVEPOINT: Sets a point within a transaction to which you can later roll back.
Syntax: SAVEPOINT savepoint_name;

4.SET TRANSACTION: Configures the properties of the current transaction.
Syntax: SET TRANSACTION [READ ONLY | READ WRITE];


Joins
Joins in SQL are used to combine records from two or more tables based on related columns. Here are the main types of joins:

1.INNER JOIN: Returns records that have matching values in both tables.                                                                       
SELECT columns FROM table1
INNER JOIN table2 ON table1.column = table2.column;

                                                                                                                                                                                     
2.LEFT JOIN (or LEFT OUTER JOIN): Returns all records from the left table and the matched records from the right table. If no match, NULL values are returned.
SELECT columns FROM table1                                                                                                                                      
LEFT JOIN table2 ON table1.column = table2.column;           


3.RIGHT JOIN (or RIGHT OUTER JOIN): Returns all records from the right table and the matched records from the left table. If no match, NULL values are returned. 
SELECT columns FROM table1                                                                                                                                                                                                                                                                                                                               
RIGHT JOIN table2 ON table1.column = table2.column;
                                                                 
                                                                                                                    
4.FULL JOIN (or FULL OUTER JOIN):  Returns all records when there is a match in either left or right table records. If there is no match, NULL values are returned.
SELECT columns FROM table1
FULL JOIN table2 ON table1.column = table2.column;


GROUP BY:  Groups rows that have the same values in specified columns into summary rows. Itâ€™s often used with aggregate functions.                                                                                                                                                              
SELECT column1, aggregate_function(column2)
FROM table_name
GROUP BY column1;

                                                                                                                                                                                                       
HAVING: Filters records after grouping, allowing conditions on aggregated data. 
                                                                   
SELECT column1, aggregate_function(column2)
FROM table_name
GROUP BY column1
HAVING condition;

Stored Procedure: A stored procedure is a precompiled collection of one or more SQL statements that can be executed as a single unit. It is stored in the database and can be called by applications or users.           
                                  
Advantages of Stored Procedures

*Performance: Stored procedures are precompiled, which can lead to improved performance compared to sending multiple individual SQL statements.

*Reusability: They can be reused multiple times in different applications without rewriting the SQL code.

*Security: They can restrict direct access to the tables and enforce security measures by allowing users to execute procedures without giving them direct access to the underlying data.

*Maintainability: Changes to business logic can be made in the stored procedure without affecting the application code.

*Transaction Management: Stored procedures can manage transactions, ensuring data integrit




# Types of Queries

## 1. Data Definition Language (DDL)
   - Full Form: Data Definition Language
   - Use: DDL is used to define, modify, and delete database structures.
   - DDL Commands:
     - CREATE: Used to create a new table or database.
       - Example: 
         CREATE TABLE students (
             id INT PRIMARY KEY,
             name VARCHAR(50),
             age INT
         );
     - ALTER: Used to modify an existing database structure.
       - Example: 
         ALTER TABLE students ADD email VARCHAR(100);
     - DROP: Used to delete tables or databases.
       - Example: 
         DROP TABLE students;
     - TRUNCATE: Used to delete all rows from a table without logging the individual row deletions.
        - Example: 
         TRUNCATE TABLE students;

## 2. Data Manipulation Language (DML)
   - Full Form: Data Manipulation Language
   - Use: DML is used for managing and manipulating data in databases.
   - DML Commands:
     - SELECT: Used to retrieve data from a database.
       - Example: 
         SELECT * FROM students;
     - INSERT: Used to add new data into a database.
       - Example: 
         INSERT INTO students (id, name, age) VALUES (1, 'John Doe', 20);
     - UPDATE: Used to modify existing data.
       - Example: 
         UPDATE students SET age = 21 WHERE id = 1;
     - DELETE: Used to remove data from a database.
       - Example: 
         DELETE FROM students WHERE id = 1;

## 3. Data Control Language (DCL)
   - Full Form: Data Control Language
   - Use: DCL is used to control access to data in the database.
   - DCL Commands:
     - GRANT: Gives user access privileges to the database.
       - Example: 
         GRANT SELECT ON students TO user1;
     - REVOKE: Takes back user access privileges.
       - Example: 
         REVOKE INSERT ON students FROM user1;

ORDER BY
The ORDER BY clause in SQL is used to sort the result set of a query by one or more columns, either in ascending (ASC) or descending (DESC) order. By default, ORDER BY sorts in ascending order.

Example:
SELECT * FROM Employees
ORDER BY Salary DESC;
This query selects all columns from the Employees table and sorts the result set by the Salary column in descending order.

---

AGGREGATE FUNCTIONS
Aggregate functions perform calculations on a set of values and return a single value. Common aggregate functions include SUM, COUNT, AVG, MIN, and MAX.

Examples:
1. SUM:
    SELECT SUM(Salary) FROM Employees;
    This returns the total sum of the Salary column in the Employees table.

2. COUNT:
    SELECT COUNT(*) FROM Employees;
    This returns the total number of rows in the Employees table.

3. AVG:
    SELECT AVG(Salary) FROM Employees;
    This returns the average salary from the Employees table.

---

DISTINCT
The DISTINCT keyword is used in SQL to return only distinct (unique) values within a column. It eliminates duplicate values from the result set.

Example:
SELECT DISTINCT Department FROM Employees;
This query selects unique department names from the Employees table, removing any duplicate values.

---

CREATE INDEX
CREATE INDEX is used to speed up the retrieval of data from a database table. Indexes can be created on one or more columns of a table.

Example:
CREATE INDEX id salary ON Employees(Salary);
This creates an index named id_salary on the Salary column of the Employees table. This can make queries that search or sort by Salary much faster.

---

WHERE
The WHERE clause is used to filter records that meet a specified condition. It is often used with SELECT, UPDATE, DELETE, etc.

Example:
SELECT * FROM Employees
WHERE Department = 'Sales';
This query selects all columns from the Employees table where the Department is 'Sales'.

DATA QUERY LANGUAGE

1.DQL stands for Data Query Language, which is a subset of SQL (Structured Query Language) used primarily for querying and retrieving data from a database. The primary command used in DQL is the `SELECT` statement, which allows users to specify the data they want to retrieve, along with conditions to filter the results.

### Key Components of DQL:

- SELECT : The command used to select data from one or more tables. You can specify which columns to retrieve and use various clauses to filter, sort, and group the results.

- FROM : Specifies the table from which to retrieve the data.

- WHERE : A clause used to filter records based on specified conditions.

- ORDER BY: Used to sort the result set in ascending or descending order.

- GROUP BY : Used to group rows that have the same values in specified columns into summary rows.

- HAVING : A clause used to filter groups based on conditions, often used with aggregate functions.

*** Example of a DQL Query:

```
SELECT first_name, last_name 
FROM employees 
WHERE department = 'Sales' 
ORDER BY last_name ASC;
```

In this example, the query retrieves the first and last names of employees from the "employees" table where the department is "Sales," and the results are sorted in ascending order by last name.



SUBQUERY

2.A subquery is a query nested inside another SQL query. It is used to retrieve data that will be used in the main query, allowing for more complex data retrieval. Subqueries can be found in various clauses such as `SELECT`, `WHERE`, and `FROM`.

### Types of Subqueries:

1. Single-Row Subquery: Returns a single row and can be used with comparison operators such as `=`, `<`, `>`, etc.
   - Example:
     
     SELECT employee_id, first_name 
     FROM employees 
     WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Sales');
     ```

2. Multi-Row Subquery: Returns multiple rows and is used with operators such as `IN`, `ANY`, or `ALL`.
   
     SELECT first_name 
     FROM employees 
     WHERE department_id IN (SELECT department_id FROM departments WHERE location_id = 1000);
     ```

3. Correlated Subquery: A subquery that references columns from the outer query. It is executed once for each row processed by the outer query.
   
     SELECT e1.first_name, e1.salary 
     FROM employees e1 
     WHERE e1.salary > (SELECT AVG(e2.salary) FROM employees e2 WHERE e1.department_id = e2.department_id);
     ```

### Benefits of Using Subqueries:

- Modularity: Break down complex queries into manageable parts.
- Readability: Improve the clarity of the SQL statements.
- Data Retrieval: Retrieve data that would be difficult to obtain with a single query.

### Points to Note:

- Subqueries can affect performance, especially if they return large result sets.
- Depending on the SQL database system, the handling of subqueries might vary, particularly in terms of optimization.

By using subqueries, you can write more sophisticated queries that can tackle a variety of data retrieval needs.


TRIGGER

3.A trigger is a special type of stored procedure in a database that automatically executes (or "fires") in response to specific events on a particular table or view. Triggers are used to enforce business rules, maintain data integrity, and automate system tasks without requiring direct user intervention.

### Key Features of Triggers:

1. Automatic Execution: Triggers are invoked automatically when specified events occur, such as `INSERT`, `UPDATE`, or `DELETE` operations on a table.

2. Row-Level or Statement-Level: Triggers can operate at the row level, where they execute once for each affected row, or at the statement level, where they execute once for the entire operation.

3. Before and After Triggers: 
   - BEFORE Trigger: Executes before the triggering event (e.g., before an `INSERT` or `UPDATE`).
   - AFTER Trigger: Executes after the triggering event.

4. Cascading Triggers: In some cases, a trigger can cause other triggers to fire, leading to a chain reaction. This can be useful but may also lead to complex interdependencies that can be difficult to manage.

### Common Uses of Triggers:

- Data Validation: Ensuring that data meets specific criteria before it is inserted or updated.
- Auditing: Automatically logging changes to data for auditing purposes (e.g., storing old values when an update occurs).
- Enforcing Referential Integrity: Ensuring that changes in one table do not violate relationships with another table.
- Complex Business Logic: Implementing rules that can't be easily enforced through constraints.

### Example of a Trigger:

Hereâ€™s a simple example of an `AFTER INSERT` trigger in SQL that logs new employee entries into an audit table:

CREATE TRIGGER after_employee_insert
AFTER INSERT ON employees
FOR EACH ROW
BEGIN
    INSERT INTO employee_audit (employee_id, action, action_date)
    VALUES (NEW.employee_id, 'INSERT', NOW());
END;
```

In this example:

- The trigger `after_employee_insert` is defined to execute after a new row is inserted into the `employees` table.
- It inserts a record into the `employee_audit` table, capturing the `employee_id`, the action taken (in this case, 'INSERT'), and the current timestamp.

### Points to Consider:

- Performance Impact: Triggers can slow down performance if they are complex or if they execute frequently, so they should be used judiciously.
- Complexity: Excessive use of triggers can lead to complex systems that are hard to debug and maintain.

Triggers are powerful tools for managing database behavior and automating processes, but they should be implemented with careful consideration of their impact on performance and system complexity.
